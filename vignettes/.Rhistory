#newer versions of sc3 require that there is a feature_symbol attribute for each gene. Let's quick fix and put the symbol slot there:
rowdata(sce_info)$feature_symbol = rowdata(sce_info)$symbol
#newer versions of sc3 require that there is a feature_symbol attribute for each gene. Let's quick fix and put the symbol slot there:
rowData(sce_info)$feature_symbol = rowData(sce_info)$symbol
sce_info = sc3_prepare(sce_info, n_cores = 4)
sce_info = sc3_estimate_k(sce_info)
sce_info@sc3$k_estimation
names(sce_info)
metadata(sce_info)$k_estimation
metadata(sce_info)$sc3$k_estimation
sce_info = sc3(sce_info, ks = 5, biology = TRUE, n_cores = 4)
sc3_plot_consensus(sce_info, k=5)
sc3_plot_expression(sce_info, k = 5, show_pdata = c("cell_type"))
# change the plotted gene names to symbol for better readability
plot_sce = sce_info
rownames(plot_sce) = fData(plot_sce)$symbol
?sc3_plot_markers
# change the plotted gene names to symbol for better readability
plot_sce = sce_info
# rownames(plot_sce) = fData(plot_sce)$symbol
sc3_plot_markers(plot_sce, k=5, p.val = 0.01, auroc = 0.90, show_pdata = c("cell_type"))
names(rowData(plot_sce))
# change the plotted gene names to symbol for better readability
plot_sce = sce_info[!is.na(rowData(sce_info)$feature_symbol),]
# rownames(plot_sce) = fData(plot_sce)$symbol
sc3_plot_markers(plot_sce, k=5, p.val = 0.01, auroc = 0.90, show_pdata = c("cell_type"))
dim(sce_info)
dim(plot_sce)
table(is.na(rowData(sce_info)$feature_symbol))
(rowData(sce_info)$feature_symbol)
# rownames(plot_sce) = fData(plot_sce)$symbol
sc3_plot_markers(sce_info, k=5, p.val = 0.01, auroc = 0.90, show_pdata = c("cell_type"))
# rownames(plot_sce) = fData(plot_sce)$symbol
sc3_plot_markers(sce_info, k=5, p.val = 0.01, auroc = 0.80, show_pdata = c("cell_type"))
library(SC3)
#newer versions of sc3 require that there is a feature_symbol attribute for each gene. Let's quick fix and put the symbol slot there:
rowData(sce_info)$feature_symbol = rowData(sce_info)$symbol
sce_info = sc3_prepare(sce_info, n_cores = 4)
sce_info = sc3_estimate_k(sce_info)
str(metadata(sce_info)$sc3)
sce_info = sc3(sce_info, ks = 5, biology = TRUE, n_cores = 4)
# change the plotted gene names to symbol for better readability
plot_sce = sce_info[!is.na(rowData(sce_info)$feature_symbol),]
# rownames(plot_sce) = fData(plot_sce)$symbol
sc3_plot_markers(sce_info, k=5, p.val = 0.1, auroc = 0.80, show_pdata = c("cell_type"))
names(rowData(sce_info))
# for hybrid SVM approach:
custom_sc3_plot_markers(plot_sce, k=5, p.val = 0.01, auroc = 0.90)
rowData(sce_info)$feature_symbol = rownames(sce_info)
# rownames(plot_sce) = fData(plot_sce)$symbol
sc3_plot_markers(sce_info, k=5, p.val = 0.1, auroc = 0.80, show_pdata = c("cell_type"))
#newer versions of sc3 require that there is a feature_symbol attribute for each gene. Let's quick fix and put the symbol slot there:
rowData(sce_info)$feature_symbol = rowData(sce_info)$symbol
# change the plotted gene names to symbol for better readability
plot_sce = sce_info[!is.na(rowData(sce_info)$feature_symbol),]
rownames(plot_sce) = fData(plot_sce)$symbol
rownames(plot_sce) = rowData(plot_sce)$symbol
# change the plotted gene names to symbol for better readability
plot_sce = sce_info[!is.na(rowData(sce_info)$feature_symbol),]
rownames(plot_sce) = rowData(plot_sce)$symbol
rowData(plot_sce)$feature_symbol = rownames(plot_sce)
sc3_plot_markers(sce_info, k=5, p.val = 0.1, auroc = 0.80, show_pdata = c("cell_type"))
length(unique(rownames(plot_sce)))
dim(plot_sce)
dim(sce_info)
# change the plotted gene names to symbol for better readability
plot_sce = sce_info[!is.na(rowData(sce_info)$symbol),]
rownames(plot_sce) = rowData(plot_sce)$symbol
rowData(plot_sce)$feature_symbol = rownames(plot_sce)
sc3_plot_markers(sce_info, k=5, p.val = 0.1, auroc = 0.80, show_pdata = c("cell_type")) #for some reason this breaks with symbols but not gene names?
sc3_plot_markers(plot_sce, k=5, p.val = 0.1, auroc = 0.80, show_pdata = c("cell_type")) #for some reason this breaks with symbols but not gene names?
# change the plotted gene names to symbol for better readability
plot_sce = sce_info[!is.na(rowData(sce_info)$feature_symbol),]
sc3_plot_markers(plot_sce, k=5, p.val = 0.1, auroc = 0.80, show_pdata = c("cell_type"))
rownames(plot_sce) = rowData(plot_sce)$symbol
sc3_plot_markers(plot_sce, k=5, p.val = 0.1, auroc = 0.80, show_pdata = c("cell_type"))
assignment = data.table(clust = sce_info$sc3_6_clusters, cell_type = sce_info$cell_type)
assignment = data.table(clust = sce_info$sc3_5_clusters, cell_type = sce_info$cell_type)
assignment[clust == 1, cell_type:= 'T helper cell']
assignment[clust == 2, cell_type:= 'Monocyte']
assignment[clust==3,cell_type:='CD8+ T-cell']
assignment[clust==4,cell_type:='B-cell']
assignment[clust == 5, cell_type:= 'NK cell']
sce_info$SC3_assignment = assignment$cell_type
p = my_plot_tSNE(tsne = tsne_info,
color = pData(sce_info)[,"SC3_assignment",drop=F],
shape = pData(sce_info)[,"cell_type",drop=F],
title = "SC3 assignment",
show_proportions = T)
p = my_plot_tSNE(tsne = tsne_info,
color = colData(sce_info)[,"SC3_assignment",drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = "SC3 assignment",
show_proportions = T)
print(p)
save(sce_info,file = file.path(out_data_dir,"sce_info.RData"))
pca = my_plot_PCA(counts = norm_exprs(sce_info),return_pca=T)$pca
screeplot(pca,type = 'lines')
dist_eucl = dist.gen(pca$x[,1:6],method='euclidean')
hfit = hclust(dist_eucl,method="average")
plot(hfit, labels = F, main = "hclust on euclidean distance in PCA space")
library(dynamicTreeCut)
groups_hclust_eucl = cutreeDynamic(hfit, distM = as.matrix(dist_eucl), deepSplit = 0, minClusterSize = 5, maxCoreScatter = 0.70, minGap = 0.25)
library(cluster)
si = silhouette(groups_hclust_eucl,dist_eucl)
plot(si, col = "darkgray", border=NA, main = "Silhouette plot for hclust (euclidean in PCA space)")
sce_info$hclust_sil = si[,3]
p = my_plot_tSNE(tsne = tsne_info,
color = pData(sce_info)[,"hclust_sil",drop=F],
shape = pData(sce_info)[,"cell_type",drop=F],
title = "tSNE colored by silhouette width")
sce_info$hclust_sil = si[,3]
p = my_plot_tSNE(tsne = tsne_info,
color = colData(sce_info)[,"hclust_sil",drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = "tSNE colored by silhouette width")
print(p+scale_color_distiller(type="div", palette = "RdBu"))
sce_info$hclust_eucl = as.factor(groups_hclust_eucl)
table(sce_info$SC3_assignment,sce_info$hclust_eucl)
# change the plotted gene names to symbol for better readability
plot_sce = sce_info
rownames(plot_sce) = rowData(plot_sce)$symbol
monocyte_markers = which(rowData(sce_info)$symbol %in% c('CD14','LYZ','FCGR3A','MS4A7'))
p = plotExpression(plot_sce,features = monocyte_markers, x="hclust_eucl",
colour_by = "hclust_eucl")
print(p)
monocyte_markers = which(rowData(sce_info)$symbol %in% c('CD14','LYZ','FCGR3A','MS4A7','CD11C'))
p = plotExpression(plot_sce,features = monocyte_markers, x="hclust_eucl",
colour_by = "hclust_eucl")
print(p)
monocyte_markers = which(rowData(sce_info)$symbol %in% c('CD14','LYZ','FCGR3A','MS4A7','ITGAX'))
p = plotExpression(plot_sce,features = monocyte_markers, x="hclust_eucl",
colour_by = "hclust_eucl")
print(p)
monocyte_markers = which(rowData(sce_info)$symbol %in% c('CD14','LYZ','FCGR3A','MS4A7','FCER1A'))
# change the plotted gene names to symbol for better readability
plot_sce = sce_info
rownames(plot_sce) = rowData(plot_sce)$symbol
monocyte_markers = which(rowData(sce_info)$symbol %in% c('CD14','LYZ','FCGR3A','MS4A7','FCER1A'))
p = plotExpression(plot_sce,features = monocyte_markers, x="hclust_eucl",
colour_by = "hclust_eucl")
print(p)
monocyte_markers = which(rowData(sce_info)$symbol %in% c('CD14','LYZ','FCGR3A','MS4A7','FCER1A','CST3'))
p = plotExpression(plot_sce,features = monocyte_markers, x="hclust_eucl",
colour_by = "hclust_eucl")
print(p)
sce_info$hclust_eucl = factor(sce_info$hclust_eucl, levels = levels(sce_info$hclust_eucl), labels = c("T-helper cell","CD14++/CD16- Monocyte","B-cell","CD8+ T-cell","NK cell","CD14+/CD16++ Monocyte", "Dendritic cell"))
p = my_plot_tSNE(tsne = tsne_info, color = pData(sce_info)[,"hclust_eucl",drop=F],
shape = pData(sce_info)[,"cell_type",drop=F],
title = "hclust (euclidean) assignment",
show_proportions = T)
sce_info$hclust_eucl = factor(sce_info$hclust_eucl, levels = levels(sce_info$hclust_eucl), labels = c("T-helper cell","CD14++/CD16- Monocyte","B-cell","CD8+ T-cell","NK cell","CD14+/CD16++ Monocyte", "Dendritic cell"))
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"hclust_eucl",drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = "hclust (euclidean) assignment",
show_proportions = T)
print(p)
assignment = data.table(clust = sce_info$sc3_5_clusters, cell_type = sce_info$cell_type)
assignment[clust == 1, cell_type:= 'CD4 T-cell']
assignment[clust == 2, cell_type:= 'Monocyte']
assignment[clust==3,cell_type:='CD8 T-cell']
assignment[clust==4,cell_type:='B-cell']
assignment[clust == 5, cell_type:= 'NK cell']
sce_info$SC3_assignment = assignment$cell_type
p = my_plot_tSNE(tsne = tsne_info,
color = colData(sce_info)[,"SC3_assignment",drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = "SC3 assignment",
show_proportions = T)
print(p)
save(sce_info,file = file.path(out_data_dir,"sce_info.RData"))
library(dynamicTreeCut)
groups_hclust_eucl = cutreeDynamic(hfit, distM = as.matrix(dist_eucl), deepSplit = 0, minClusterSize = 5, maxCoreScatter = 0.70, minGap = 0.25)
sce_info$hclust_sil = si[,3]
p = my_plot_tSNE(tsne = tsne_info,
color = colData(sce_info)[,"hclust_sil",drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = "tSNE colored by silhouette width")
print(p+scale_color_distiller(type="div", palette = "RdBu"))
sce_info$hclust_eucl = as.factor(groups_hclust_eucl)
table(sce_info$SC3_assignment,sce_info$hclust_eucl)
sce_info$hclust_eucl = factor(sce_info$hclust_eucl, levels = levels(sce_info$hclust_eucl), labels = c("CD4 T-cell","CD14++/CD16- Monocyte","B-cell","CD8 T-cell","NK cell","CD14+/CD16++ Monocyte", "Dendritic cell"))
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"hclust_eucl",drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = "hclust (euclidean) assignment",
show_proportions = T)
print(p)
library(dendextend)
dist_pearson = dist.gen(t(norm_exprs(sce_info)),method = "pearson")
hfit = hclust(dist_pearson,method="average")
groups_hclust_pearson = cutree(hfit, k=6)
sce_info$hclust_pearson = as.factor(groups_hclust_pearson)
hfit2 = color_branches(hfit, k=6)
hfit2 = hfit2 %>% set("labels", rep("",dim(sce_info)[2]))
plot(hfit2, main = "hclust on Pearson correlation")
p = my_plot_tSNE(tsne = tsne_info, color = pData(sce_info)[,"hclust_pearson",drop=F],
shape = pData(sce_info)[,"cell_type",drop=F],
title = "hclust (Pearson) assignment",
show_proportions = T)
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"hclust_pearson",drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = "hclust (Pearson) assignment",
show_proportions = T)
print(p)
library(pcaReduce)
expr_mat_info = t(norm_exprs(sce_info))
assignment_info = PCAreduce(expr_mat_info, nbt = 5, q = 6, method = "M")
table(assignment_info[[1]][,4])
plots = list()
for(i in 1:5){
df = data.frame(apply(assignment_info[[i]],c(1,2),as.factor))
p = my_plot_tSNE(tsne=tsne_info, color = df[,'cl_id.2',drop=F],
shape = colData(sce_info)[,"cell_type",drop=F],
title = paste0("pcaReduce, run ", i))
plots[[i]] = p
}
ggmultiplot(plots[[1]],plots[[2]],plots[[3]],plots[[4]],plots[[5]],cols=3)
install.packages('MCL')
sim = 1-as.matrix(dist_eucl)/max(dist_eucl)
adj_corr = build_adjacency_matrix(mat = sim,cutoff="auto",is_similarity=T)
library(igraph)
library(MCL)
adj = adj_corr$adj
groups.MCL = mcl(adj)
selfloop = F
groups.MCL = mcl(adj, addLoops = selfloop)
groups.MCL
source('~/scRNAseq_workflow/code/scrnaseq_workflow_Clustering.R')
# use R MCL:
groups_MCL = MCLcell.clust(adj_corr, use_external_mcl = FALSE)
#use external MCL (UNIX only)
#groups_MCL = MCLcell.clust(adj_corr, use_external_mcl = TRUE, mcl_path = mcl_path)
sce_info$MCL = as.factor(groups_MCL)
table(sce_info$MCL,sce_info$hclust_eucl)
p = my_plot_tSNE(tsne = tsne_info, color = pData(sce_info)[,"MCL",drop=F],
shape = pData(sce_info)[,"hclust_eucl",drop=F],
title = "MCL (cutoff=auto) assignment",
show_proportions = T)
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"MCL",drop=F],
shape = colData(sce_info)[,"hclust_eucl",drop=F],
title = "MCL (cutoff=auto) assignment",
show_proportions = T)
print(p)
sim = 1-as.matrix(dist_eucl)/max(dist_eucl)
adj_corr = build_adjacency_matrix(mat = sim,cutoff="auto",is_similarity=T)
adj_corr = build_adjacency_matrix(mat = sim,cutoff=0.8,is_similarity=T)
groups_MCL = MCLcell.clust(adj_corr,mcl_path = mcl_path)
sce_info$MCL2 = as.factor(groups_MCL)
table(sce_info$MCL2,sce_info$hclust_eucl)
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"MCL2",drop=F],
shape = colData(sce_info)[,"hclust_eucl",drop=F],
title = "MCL (cutoff=0.8) assignment",
show_proportions = T)
p = p + scale_color_manual(values = brewer.pal(10,"Paired"))
print(p)
DBSCAN_groups = run_dbscan(dist_eucl,eps="auto",min_pts=7,tol=0.005)
sce_info$DBSCAN = as.factor(DBSCAN_groups)
p = my_plot_tSNE(tsne = tsne_info, color = pData(sce_info)[,"DBSCAN",drop=F],
shape = pData(sce_info)[,"hclust_eucl",drop=F],
title = "DBSCAN assignment",show_proportions = T)
sce_info$DBSCAN = as.factor(DBSCAN_groups)
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"DBSCAN",drop=F],
shape = colData(sce_info)[,"hclust_eucl",drop=F],
title = "DBSCAN assignment",show_proportions = T)
print(p)
si = silhouette(DBSCAN_groups, dist_eucl)
plot(si, col = "darkgray", border=NA, main = "Silhouette plot for dbscan (euclidean in PCA space)")
boot = fpc::clusterboot(data = dist_eucl, clustermethod = fpc::dbscanCBI, eps = 5.53,
MinPts = 7,B = 100, distances = T, count=F, method = "dist",
bootmethod = "boot")
dt = melt(data.table(cluster = c(0:4), boot$bootresult),id.vars="cluster",val="jaccard index",var="boot number")
dt = dt[cluster!=0]
p = ggplot(dt, aes(x=as.factor(cluster),y=`jaccard index`)) + geom_boxplot() +theme_bw()
print(p + ggtitle("Jaccard similarity between cluster assignment on the full data and on 100 bootstrap samples"))
library(mclust)
mclust_assignment = gmm_main(pc_scores = pca$x,n_comp=6, k=1:8,n_cores=1)
sce_info$mclust = as.factor(mclust_assignment)
table(sce_info$mclust,sce_info$hclust_eucl)
p = my_plot_tSNE(tsne = tsne_info, color = pData(sce_info)[,"mclust",drop=F],
shape = pData(sce_info)[,"hclust_eucl",drop=F],
title = "Mclust assignment",show_proportions = T)
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"mclust",drop=F],
shape = colData(sce_info)[,"hclust_eucl",drop=F],
title = "Mclust assignment",show_proportions = T)
print(p)
mclust_model = gmm_main(pc_scores = pca$x,n_comp=6,do_crossval = F, best_k = 6, return_model = TRUE)
sce_info$mclust_forced = as.factor(mclust_model$classification)
table(sce_info$mclust_forced,sce_info$hclust_eucl)
p = my_plot_tSNE(tsne = tsne_info, color = pData(sce_info)[,"mclust_forced",drop=F],
shape = pData(sce_info)[,"hclust_eucl",drop=F],
title = "Mclust assignment")
mclust_model = gmm_main(pc_scores = pca$x,n_comp=6,do_crossval = F, best_k = 6, return_model = TRUE)
sce_info$mclust_forced = as.factor(mclust_model$classification)
table(sce_info$mclust_forced,sce_info$hclust_eucl)
p = my_plot_tSNE(tsne = tsne_info, color = colData(sce_info)[,"mclust_forced",drop=F],
shape = colData(sce_info)[,"hclust_eucl",drop=F],
title = "Mclust assignment")
print(p)
mclust_boot = MclustBootstrap(mclust_model, nboot=500)
summary(mclust_boot, what = "ci")
par(mfrow=c(1,6))
plot(mclust_boot, what = "pro")
par(mfrow=c(6,6))
plot(mclust_boot, what = "mean")
par(mfrow=c(6,6))
plot(mclust_boot, what = "var")
par(mfrow=c(1,1))
save(sce_info,file = file.path(out_data_dir,"sce_info.RData"))
devtools::install_github("satijalab/seurat") #Seurat 2.0.1, fails to install on win
a = c('a','b','c')
clusts = c(1,1,2)
y = sapply(seq(length(unique(clusts))), function(j) a[clusts==j])
y
source('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
sce_clean$cell_type = sce_info$cell_type
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
use_external_mcl = FALSE
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
source('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
sce_clean$cell_type = sce_info$cell_type
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
sce_clean$cell_type = sce_info$cell_type
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
debugSource('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
mcl_result
typeof(mcl_result)
mcl_result = tryCatch(
{mcl(adj.corr, addLoops = FALSE)},
error = function(cond){
message(cond)
return(0)
},
warning = function(cond){
message(cond)
}
)
debugSource('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
sce_clean$cell_type = sce_info$cell_type
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
mcl_result
mcl_result = tryCatch(
{mcl(adj.corr, addLoops = FALSE, allow1=TRUE)},
error = function(cond){
message(cond)
return(0)
},
warning = function(cond){
message(cond)
}
)
debugSource('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
sce_clean$cell_type = sce_info$cell_type
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
adj.corr
source('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
debugSource('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
View(expr_dt_melt)
unique(expr_dt_melt$gene_id)
expr_dt_melt = cellsius_find_gene_sets(expr_dt_melt, corr_cutoff = corr_cutoff, use_external_mcl=use_external_mcl, mcl_path=mcl_path)
?mcl
debugSource('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
source('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
source('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
cellsius_print_summary(cellsius_out)
source('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
sce_clean$cell_type = sce_info$cell_type
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
source('~/scRNAseq_workflow/code/scrnaseq_workflow_CellSIUS.R')
cellsius_out = cellsius_main(sce_clean, group_id = "cell_type", min_n_cells = 5,
verbose =T, min_fc = 2, organism = "human", iter=0,
max_perc_cells = 50, fc_between_cutoff = 1, use_external_mcl = use_external_mcl)
cellsius_print_summary(cellsius_out)
cellsius_out
unique(cellsius_out[cell_idx=="AAAGCAAGTCAAGCGA"]$sub_cluster)
unique(cellsius_out[sub_cluster == "T-cell_1_1"][,c('gene_id','symbol','description')])
cellsius_out[,length(unique(cell_idx)),by="sub_cluster"]
plot_rare_cells(rare=cellsius_out, tsne=tsne_info)
plot_rare_cells(rare=cellsius_out[main_cluster=="T-cell"], tsne=tsne_info)
marker_idx = which(rownames(sce_clean)%in%cellsius_out[sub_cluster=='T-cell_1_1']$gene_id)
plotlist = list()
colors = t(norm_exprs(sce_clean)[marker_idx,,drop=F])
colnames(colors) =  fData(sce_clean)$symbol[marker_idx]
marker_idx = which(rownames(sce_clean)%in%cellsius_out[sub_cluster=='T-cell_1_1']$gene_id)
plotlist = list()
colors = t(norm_exprs(sce_clean)[marker_idx,,drop=F])
colnames(colors) =  rowData(sce_clean)$symbol[marker_idx]
for(i in seq(dim(colors)[2])){
plotlist[[i]] = my_plot_tSNE(tsne = tsne_info,
color = colors[,i,drop=F],
alpha = 0.8, title = colnames(colors)[i]) + scale_color_distiller(palette = 'RdYlBu')
}
ggmultiplot(plotlist[[1]],plotlist[[2]],plotlist[[3]], plotlist[[4]],cols = 2)
library(shiny)
launch_marker_vis_app(tsne = tsne_info, sce=sce_clean, marker_idx = marker_idx)
source('~/scRNAseq_workflow/vignettes/../code/scrnaseq_workflow_Plotting.R')
launch_marker_vis_app(tsne = tsne_info, sce=sce_clean, marker_idx = marker_idx)
final_clusters = cellsius_final_cluster_assignment(cellsius_out, sce_clean, group_id = "cell_type", min_n_genes=3)
table(final_clusters$cluster)
p = my_plot_tSNE(tsne = tsne_info, color = final_clusters, title = "CellSIUS cluster assignment")
print(p)
sce_clean$SC3_assignment = sce_info$SC3_assignment
sce_clean$hclust_eucl = sce_info$hclust_eucl
de_wilcox = run_wilcoxon_test(sce_clean, cl_id = "hclust_eucl", cl_ref = "B-cell",
fc_cutoff = 1, alpha = 0.05)
source('~/scRNAseq_workflow/code/scrnaseq_workflow_DE.R')
sce_clean$SC3_assignment = sce_info$SC3_assignment
sce_clean$hclust_eucl = sce_info$hclust_eucl
de_wilcox = run_wilcoxon_test(sce_clean, cl_id = "hclust_eucl", cl_ref = "B-cell",
fc_cutoff = 1, alpha = 0.05)
dim(de_wilcox)
head(de_wilcox)
mean_exprs_dt = data.table(gene_id = rownames(sce_clean),mean_exprs = fData(sce_clean)$mean_exprs)
mean_exprs_dt = data.table(gene_id = rownames(sce_clean),mean_exprs = rowData(sce_clean)$mean_exprs)
names(rowData(sce_clean))
sce_clean = calculateQCMetrics(sce_clean)
names(rowData(sce_clean))
mean_exprs_dt = data.table(gene_id = rownames(sce_clean),mean_exprs = rowMeans(norm_exprs(sce_clean)))
de_wilcox = merge(de_wilcox,mean_exprs_dt, by = "gene_id")
names(de_wilcox)
p = generic_scatterplot(de_wilcox, x_col = "mean_exprs", y_col = "log2fc",
color = "DE_flag")
print(p+ggtitle('MA plot for Wilcoxon test'))
de_wilcox[,log10_pval:=-log10(adj_pval)]
p = generic_scatterplot(de_wilcox, x_col = "log2fc", y_col = "log10_pval",
color = "DE_flag")
print(p+ggtitle('Volcano plot for Wilcoxon test'))
library(DT)
top_DE = de_wilcox[DE_flag==TRUE][order(log2fc,decreasing = T)]$gene_id[1:20]
gene_table = get_gene_annotations(top_DE,get_descriptions = T)
datatable(gene_table, caption = "Top 20 upregulated genes in B-cells")
de_limma_voom = run_limma(sce_clean, cl_id = "hclust_eucl", cl_ref = "B-cell",
method = "voom", fc_cutoff = 1, alpha = 0.05, count_thr = 1,pct=50)
de_limma_trend = run_limma(sce_clean, cl_id = "hclust_eucl", cl_ref = "B-cell",
method = "trend", fc_cutoff = 1, alpha = 0.05, count_thr = 1, pct=50)
de_limma_trend = merge(de_limma_trend, mean_exprs_dt)
de_limma_trend[,voom_overlap:=de_limma_trend$DE_flag == de_limma_voom$DE_flag]
p = generic_scatterplot(de_limma_trend, x_col = "mean_exprs", y_col = "logFC",
color = "DE_flag", shape = "voom_overlap")
print(p + ggtitle("MA plot for limma-trend"))
table(de_limma_trend$DE_flag,de_limma_voom$DE_flag)
table(de_wilcox[de_limma_trend$gene_id,on="gene_id"]$DE_flag,de_limma_trend$DE_flag)
# Compare p-values between Wilcoxon test and limma
ggplot(data.table(wilcox = de_wilcox[de_limma_trend$gene_id,on="gene_id"]$pval,
limmatrend = de_limma_trend$P.Val),
aes(x=-log10(wilcox),y=-log10(limmatrend)))+geom_point()+theme_bw()+
ggtitle('Comparison of p-values between limmatrend and Wilcoxon test')
de_MAST = run_MAST(sce_clean,cl_id = "hclust_eucl",cl_ref = "B-cell",norm=T,
set_thresh=T,fc_cutoff = 1, alpha=0.05)
de_MAST = run_MAST(sce_clean,cl_id = "hclust_eucl",cl_ref = "B-cell",norm=T,
set_thresh=F,fc_cutoff = 1, alpha=0.5)
de_MAST = merge(de_MAST, mean_exprs_dt)
p = generic_scatterplot(de_MAST, x_col = "mean_exprs", y_col = "log2FC",
color = "DE_flag")
print(p+ggtitle("MA plot for MAST"))
table(de_MAST$DE_flag)
table(de_MAST[de_limma_trend$gene_id,]$DE_flag,de_limma_trend$DE_flag)
# Compare p-values between MAST and limma
ggplot(data.table(MAST = de_MAST[de_limma_trend$gene_id,on="gene_id"]$pval,
limmatrend = de_limma_trend$P.Val),
aes(x=-log10(MAST),y=-log10(limmatrend)))+geom_point()+theme_bw()+
ggtitle('Comparison of p-values between limmatrend and MAST')
# make an overview plot of the star genecounts output
library(data.table)
library(ggplot2)
library(RColorBrewer)
source('~/scRNAseq_workflow/code/scrnaseq_workflow_Setup.R')
t = fread("Y:/Data/Rebekka/RW001B_sequences/star/RW001B_test_mapping_sample1_pool_1ReadsPerGene.out.tab",skip=4)
table(t$V2!=0)
plot(cumsum(t$V2))
#t = fread("Y:/Data/Rebekka/Example_sequences/SRR6750057_5Mio_reads/star/ReadsPerGene.out.tab", skip = 4)
annot = get_gene_annotations(t$V1,get_descriptions = F)
setnames(t, c('gene_id','count_unstranded','count_strand1','count_strand2'))
t = merge(t,annot,by='gene_id')
setorder(t,-count_unstranded)
t$symbol = factor(t$symbol, levels = rev(t$symbol))
plot(cumsum(t$V2))
plot(cumsum(t$count_unstranded)
)
plot(cumsum(t$count_unstranded[t$count_unstranded!=0])
)
