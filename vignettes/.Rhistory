wd = "/data/Internship_Things/scRNASeq_workflow/vignettes"
source("https://bioconductor.org/biocLite.R")
install.packages("devtools")
# from CRAN
install.packages("Rtsne") #Rtsne v. 0.13
install.packages("ggplot2") # ggplot2 v. 2.2.1
install.packages("data.table") # data.table v. 1.10.4
install.packages("RColorBrewer") # RColorBrewer v. 1.1-2
install.packages("mvoutlier") # mvoutlier 2.0.8, required by some functions from scater
devtools::install_github("bwlewis/irlba") # irlba 2.3.2, optional. Make sure you use irlba > 2.3.1, older versions contain a bug that results in unreliable output!
.libPaths()
library(devtools)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("bwlewis/irlba") # irlba 2.3.2, optional. Make sure you use irlba > 2.3.1, older versions contain a bug that results in unreliable output!
# rom Bioconductor
biocLite("scater") # scater v. 1.4.0
biocLite("biomaRt")
install.packages("XML")
biocLite("biomaRt")
biocLite("scater") # scater v. 1.4.0
# rom Bioconductor
biocLite("scater", siteRepos = biocinstallRepos(version=3.5)) # scater v. 1.4.0
biocLite("scater", siteRepos = biocinstallRepos(version="3.5"))
source("https://bioconductor.org/biocLite.R", siteRepos = biocinstallRepos(version="3.5"))
source("https://bioconductor.org/biocLite.R")
?biocLite
biocinstallRepos()
biocinstallRepos(version = "3.5")
chooseBioCmirror()
biocLite("scater", siteRepos = biocinstallRepos(version="3.5"))
.libPaths("~/R/x86_64-redhat-linux-gnu-library/")
.libPaths()
library(scater)
.libPaths("~/R/x86_64-redhat-linux-gnu-library/3.4/")
library(scater)
.libPaths("~/R/x86_64-redhat-linux-gnu-library/3.4/")
library(scater)
install.packages("XML")
library(scater)
sessionInfo()
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.4/")
.libPaths()
sessionInfo()
install.packages("~/Downloads/scater_1.4.0.tar.gz", repos = NULL)
library(scater)
sessionInfo()
source("https://bioconductor.org/biocLite.R")
library(BiocInstaller)
sessionInfo()
install.packages("BiocInstaller",
repos="http://bioconductor.org/packages/3.5/bioc")
install.packages("BiocInstaller",
+                  repos="http://bioconductor.org/packages/3.5/bioc")
install.packages("BiocInstaller",repos="http://bioconductor.org/packages/3.5/bioc")
library(BiocInstaller)
install.packages("devtools")
# rom Bioconductor
biocLite("scater") # scater v. 1.4.0
biocLite("scran") # scran v. 1.4.5
# from CRAN
install.packages("Rtsne") #Rtsne v. 0.13
# from CRAN
install.packages("Rtsne") #Rtsne v. 0.13
install.packages("ggplot2") # ggplot2 v. 2.2.1
install.packages("data.table") # data.table v. 1.10.4
install.packages("RColorBrewer") # RColorBrewer v. 1.1-2
install.packages("mvoutlier") # mvoutlier 2.0.8, required by some functions from scater
# from CRAN
install.packages("Rtsne") #Rtsne v. 0.13
install.packages("ggplot2") # ggplot2 v. 2.2.1
install.packages("data.table") # data.table v. 1.10.4
install.packages("RColorBrewer") # RColorBrewer v. 1.1-2
install.packages("mvoutlier") # mvoutlier 2.0.8, required by some functions from scater
devtools::install_github("bwlewis/irlba") # irlba 2.3.2, optional. Make sure you use irlba > 2.3.1, older versions contain a bug that results in unreliable output!
# ensembldb 2.0.4 and EnsDb.Hsapiens.v79 2.1.0
biocLite(c("ensembldb","EnsDb.Hsapiens.v79"))
# org.Hs.eg.db v. 3.4.1
biocLite("org.Hs.eg.db")
library(org.Hs.eg.db)
sessionInfo()
# ensembldb 2.0.4 and EnsDb.Mmusculus 2.1.0
biocLite(c("ensembldb","EnsDb.Mmusculus.v75"))
# org.Mm.eg.db v. 3.4.1
biocLite("org.Mm.eg.db")
# M3Drop version 3.05.00 (Note: This is still under active development, please let me know if a new version breaks my functions...)
devtools::install_github("tallulandrews/M3D")
library(M3Drop)
sessionInfo()
install.packages("cluster") # cluster v. 2.0.6
install.packages("dendextend") # dendextend v. 1.5.2
install.packages("Ckmeans.1d.dp") # Ckmeans.1d.dp v. 4.2.1
install.packages("cluster")
install.packages("cluster") # cluster v. 2.0.6
install.packages("dendextend") # dendextend v. 1.5.2
install.packages("Ckmeans.1d.dp") # Ckmeans.1d.dp v. 4.2.1
install.packages("dbscan") # DBSCAN v. 1.1-1
install.packages(c("mclust","mvtnorm")) # mclust v. 5.4 and mvtnorm 1.0.6
install.packages("dynamicTreeCut") # dynamicTreeCut v. 1.63-1
biocLite("SC3") # SC3 v. 1.4.2
library(BiocInstaller)
biocLite("SC3") # SC3 v. 1.4.2
biocLite("SC3") # SC3 v. 1.4.2
devtools::install_github("satijalab/seurat") #Seurat 2.0.1
devtools::install_github('JustinaZ/pcaReduce') #pcaReduce 1.68.0
install.packages("pcaMethods")
biocLite("pcaMethods")
devtools::install_github('JustinaZ/pcaReduce') #pcaReduce 1.68.0
biocLite("limma") # limma v. 3.32.5
biocLite("MAST") # MAST v. 1.2.1
wd = "/data/Internship_Things/scRNASeq_workflow/vignettes/"
#Directory where input files are stored
input_dir = file.path(wd,"example_data")
#Directory where code is stored
code_dir = file.path(wd,"code")
code_dir
wd = "/data/Internship_Things/scRNASeq_workflow"
#Directory where input files are stored
input_dir = file.path(wd,"example_data")
#Directory where code is stored
code_dir = file.path(wd,"code")
#where to save the output data?
out_data_dir = file.path(wd,"example_output")
#where to save the produced plots?
plotdir = file.path(wd,"example_plots")
set.seed(17) #to make tSNE plots reproducible
source(file.path(code_dir,"scRNASeq_pipeline_functions.R"))
# loading the libraries that are required throughout the analysis
library_calls()
# Read the dataset
counts = read.delim(file.path(input_dir,"pbmc_example_counts.txt"),sep="\t")
# if we have genes that are not expressed in any cell, discard them
keep_feature = !gene_filter_by_feature_count(counts,0)
counts = counts[keep_feature,]
# make a table of metadata (e.g. batch, cell type annotation,treatment,...)
# Here, we do not have any such information, so we just give each cell a name
# Note that the rownames of this table have to correspond to the column names
# of the count matrix.
annot = data.frame(cell_idx=paste0("pbmc_C",seq(dim(counts)[2])))
rownames(annot) = colnames(counts)
pd = new("AnnotatedDataFrame", data=annot)
# get gene annotations from ensembldb
# optional: get gene descriptions from org.Hs.eg.db (slows down the process a lot!)
# NOTE: the output of get_gene_annotations is a data.table sorted by gene identifier.
#       This means the genes are no longer in the same order as in the count matrix!
geneName = get_gene_annotations(rownames(counts),organism = "human",get_descriptions = F)
# convert this to feature metadata
fd_table = as.data.frame(geneName)
rownames(fd_table) = geneName$gene_id
fd_table = fd_table[rownames(counts),]
fd = new("AnnotatedDataFrame",data=fd_table)
#construct SCESet
sce = newSCESet(countData = counts, phenoData=pd,featureData = fd)
#where to save the output data?
out_data_dir = file.path(wd,"test_example_output")
#where to save the produced plots?
plotdir = file.path(wd,"test_example_plots")
if(!dir.exists(out_data_dir)) {dir.create(out_data_dir)}
if(!dir.exists(plotdir)) {dir.create(plotdir)}
#calculate QC metrics
sce = calculateQCMetrics(sce,feature_controls = list(MT=which(fData(sce)$chr=="MT")))
# assign cell cycle phase (based on the method from scran)
# because PBMCs are post-mitotic, most cells should be assigned to G0/G1 phase
cc = annotate_cell_cycle(sce)
sce$cell_cycle_phase = cc$phases
sce$cc_scores = cc$scores
#save the SCESet
save(sce,file=file.path(out_data_dir,"sce_raw.RData"))
load(file.path(out_data_dir,"sce_raw.RData"))
p1 = plotQC(sce, type="high",feature_names_to_plot = "symbol")
print(p1)
p1.2 = custom_plotHighestExprs(sce,feature_names_to_plot = "symbol")
p1.2 = p1.2 + xlab("Expression [raw counts, log2]")
print(p1.2)
# to save a plot, use the ggsave function:
ggsave(p1.2, file = "saved_example_plot.pdf",height=7,width=7)
p1
p1.2
print(p1.2)
p1.2 = custom_plotHighestExprs(sce,feature_names_to_plot = "symbol")
print(p1.2)
p1.2
p = ggplot(data.frame (x=c(1,2,3), y=c(1,2,3)), aes(x=x,y=y))+geom_point()
p
graphics.off()
p
?graphics.off
dev.new()
p
